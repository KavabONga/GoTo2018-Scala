class Rational(m : Int, n : Int = 1) {
  override def toString: String = m.toString + {if (n != 1) s"/$n" else ""}
  private def gcd(x : Int, y : Int):Int = {
    if (x == 0) y
    else {
      if (y == 0) x
      else gcd(y, x % y)
    }
  }
  private def binPow(x : Int, n : Int): Int = {
    if (n == 0) 1
    else {
      if (n % 2 == 0) {
        val t = binPow(x, n / 2)
        t * t
      }
      else binPow(x, n - 1) * x
    }
  }
  val numer : Int = (m * n / n.abs) / gcd(n, m)
  val denom : Int = n.abs / gcd(n, m)
  def + (that : Rational) = new Rational(numer * that.denom + that.numer * denom, denom * that.denom)
  def - (that : Rational) = new Rational(numer * that.denom + that.numer * denom, denom * that.denom)
  def * (that : Rational) = new Rational(numer * that.numer, denom * that.denom)
  def / (that : Rational) = new Rational(numer * that.denom, that.numer * denom)
  def pow(p : Int) : Rational = new Rational(binPow(numer, p), binPow(denom, p))

}
implicit def intToRational(x : Int): Rational = new Rational(x)
